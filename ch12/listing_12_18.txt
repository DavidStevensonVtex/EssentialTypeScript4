Listing 12-18. Using a Type Predicate Function in the index.ts File in the src Folder

In situations where you need to identify objects by type, generic types are not helpful, and a Predicate
function must be used. Listing 12-18 adds a parameter to the filter method that accepts a type Predicate
function, which is then used to find objects of a specific type.

import { City, Person, Product, Employee } from "./dataTypes" ;

let people = [ 
    new Person ( "Bob Smith", "London" ), 
    new Person("Dora Peters", "New York") 
] ;

let products = [
    new Product("Running Shoes", 100),
    new Product("Hat", 25)
] ;

let cities = [
    new City("London", 8136000), 
    new City("Paris", 2141000)
];

let employees = [ 
    new Employee("Bob Smith", "Sales"),
    new Employee("Alice Jones", "Sales")
];

class DataCollection<T extends { name: string }>{
    protected items: T[] = [] ;

    constructor(initialItems: T[]) 
    {
        this.items.push(...initialItems);
    }

    filter<V extends T>(predicate: (target) => target is V): V[]
    {
        return this.items.filter ( item => predicate(item)) as V[] ;
    }
}

let mixedData = new DataCollection<Person | Product>( [...people, ...products]);
function isProduct(target): target is Product {
    return target instanceof Product ;
}

let filteredProducts = mixedData.filter<Product>(isProduct);
filteredProducts.forEach(p => console.log(`Product: ${ p.name }, ${p.price}`));

// Product: Running Shoes, 100
// Product: Hat, 25