Listing 10-21. Using Underlying Types in an Intersection in the index.ts File in the src Folder

type Person = {
    id:   string,
    name: string,
    city: string
} ;

type Employee = {
    id: string,
    company: string,
    dept: string
} ;

type EmployedPerson = Person & Employee ;

function correlateData(peopleData: Person[], staff: Employee[]): EmployedPerson[] {
    const defaults = { company: "None", dept: "None" } ;
    return peopleData.map(p => ( {...p, ...staff.find(e => e.id === p.id) || { ...defaults, id: p.id } })) ;
}

let people: Person[] = [
    { id: "bsmith",  name: "Bob Smith",    city: "London" },
    { id: "ajones",  name: "Alice Johnes", city: "Paris" },
    { id: "dpeters", name: "Dora Peters",  city: "New York" }
] ;

let employees: Employee[] = [
    { id: "bsmith", company: "Acme Co", dept: "Sales" },
    { id: "dpeters", company: "Acme Co", dept: "Development" }
] ;

let dataItems: EmployedPerson[] = correlateData(people, employees) ;

function writePerson(per: Person): void {
    console.log(`Person:   ${per.id}, ${per.name},    ${per.city}`);
}

function writeEmployee(emp: Employee): void {
    console.log(`Employee: ${emp.id}, ${emp.company}, ${emp.dept}`);
}

dataItems.forEach(item => {
    console.log();
    writePerson(item);
    writeEmployee(item);
});

// Person:   bsmith, Bob Smith,    London     
// Employee: bsmith, Acme Co, Sales

// Person:   ajones, Alice Johnes,    Paris   
// Employee: ajones, None, None

// Person:   dpeters, Dora Peters,    New York
// Employee: dpeters, Acme Co, Development    